#!/usr/bin/env python
# Copyright 2025 Gary Leong gary@config0.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import json
import sys

from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource.manage import ResourceCmdHelper
from config0_publisher.serialization import b64_decode


def get_env_var(variable, default=None, must_exists=None):
    """
    Retrieve environment variable with optional default value and existence check.
    """
    _value = os.environ.get(variable)
    if _value:
        return _value
    if default:
        return default
    if not must_exists:
        return
    raise Exception(f"{variable} does not exist")


class Main(ResourceCmdHelper):
    """
    Wrapper class for Ansible execution
    """
    def __init__(self):
        self.classname = 'AnsibleWrapper'

        # ref 4353245325
        ResourceCmdHelper.__init__(
            self,
            app_name="ansible",
            set_variables=["method", "shelloutconfig"],
            set_must_exists=["stateful_id"],
            set_default_values={
                "failed_destroy": None,
                "build_timeout": 500,
                "build_image": "aws/codebuild/standard:4.0",
                "compute_type": "BUILD_GENERAL1_SMALL",
                "image_type": "LINUX_CONTAINER",
                "buildspec_file": "buildspec.yml"
            }
        )

        self.logger = Config0Logger(self.classname, logcategory="cloudprovider")
        self.logger.debug(f"Instantiating {self.classname}")

        # The docker image to execute files
        self.docker_image = get_env_var("DOCKER_IMAGE", default="config0/ansible-run-env")
        self._set_exec_ymls()
        self.run_dir = os.getcwd()

    def _set_exec_ymls(self):
        """
        Determine execution YAML files for Ansible.
        """
        # determine execution ymls for ansible
        self.exec_ymls = os.environ.get("ANS_VAR_exec_ymls")
        if self.exec_ymls:
            return

        self.exec_ymls = os.environ.get("ANS_VAR_EXEC_YMLS")
        if self.exec_ymls:
            return

        self.exec_ymls = get_env_var(
            f"{self.app_name.upper()}_EXEC_YMLS",
            default="install.yml",
            must_exists=True
        )

    def write_ssh_key(self):
        """
        Write base64 encoded SSH key to file.
        """
        private_key_hash = os.environ.get("ANS_VAR_private_key")
        if not private_key_hash:
            self.logger.error("Cannot determine private key from env var ANSIBLE_SSH_KEY/PRIVATE_SSH_KEY")
            exit(11)

        private_key = b64_decode(private_key_hash)
        file_path = os.path.join(self.exec_dir, "ssh_key.pem")

        with open(file_path, "w") as f:
            f.write(private_key)
            f.write("\n")

        cmd = f"chmod 400 {file_path}"
        self._execute(cmd, output_to_json=False, exit_error=True)

        self.logger.debug("#" * 32)
        self.logger.debug("")
        self.logger.debug(f"Wrote ssh_key file {file_path}")
        self.logger.debug("")
        self.logger.debug("#" * 32)

    def write_hosts_file(self):
        """
        Write Ansible hosts file from base64 encoded hosts data.
        """
        hosts_hash = os.environ.get("ANS_VAR_hosts")
        if not hosts_hash:
            self.logger.error("Cannot determine hosts from environment variable ANSIBLE_HOSTS_HASH")
            exit(11)

        ansible_hosts = b64_decode(hosts_hash)
        file_path = os.path.join(self.exec_dir, "hosts")

        with open(file_path, "w") as f:
            for _ip_group, _ips in ansible_hosts.items():
                f.write(f'[{_ip_group}]\n')
                for _ip in _ips:
                    f.write(f"{_ip}\n")

        self.logger.debug("#" * 32)
        self.logger.debug("")
        self.logger.debug(f"Wrote hosts file {file_path}")
        self.logger.debug("")
        self.logger.debug("#" * 32)

    def _execute(self, cmd, output_to_json=False, exit_error=True):
        return self.execute(cmd, output_to_json=output_to_json, exit_error=exit_error)

    @staticmethod
    def _format_output(**kwargs):
        """
        Format command execution output.
        """
        results = []
        output = kwargs["output"]
        output_to_json = kwargs.get("output_to_json")

        for _output in output:
            if not _output.strip():
                continue
            results.append(_output)

        if not output_to_json:
            return results
        return json.loads(results)

    def _get_env_filepath(self):
        """
        Get Docker environment file path.
        """
        _docker_env_file = get_env_var("DOCKER_ENV_FILE", default=".env")
        self.docker_env_file = os.path.join(os.getcwd(), _docker_env_file)
        return self.docker_env_file

    def _create_env_file(self):
        """
        Create Docker environment file with specified environment variables.
        """
        docker_env_fields = get_env_var("DOCKER_ENV_FIELDS")
        self._get_env_filepath()

        if not docker_env_fields:
            self.logger.debug("No docker env fields specifield - skipping .env file")
            return

        with open(self.docker_env_file, "w") as f:
            f.write(f"ANSIBLE_EXEC_YMLS={self.exec_ymls}")

            self.logger.debug(f"Writing environment file {self.docker_env_file} with field {docker_env_fields}")

            for docker_env_field in docker_env_fields.split(","):
                field = docker_env_field.strip().upper()
                if not os.environ.get(field):
                    continue
                f.write(f"\n{field}={os.environ[field]}")

        return self.docker_env_file

    def _exec_docker_local(self):
        """
        Execute Docker container locally with mounted volumes and environment variables.
        """
        self._create_env_file()
        os.chdir(self.run_share_dir)

        cmd = f"chmod 644 {self.exec_dir}"
        self._execute(cmd, output_to_json=False, exit_error=False)

        if os.path.exists(self.docker_env_file):
            cmd = f'docker run -e ANSIBLE_EXEC_YMLS="{self.exec_ymls}" --env-file {self.docker_env_file} --rm -v {self.run_share_dir}:{self.share_dir} {self.docker_image}'
        else:
            cmd = f'docker run -e ANSIBLE_EXEC_YMLS="{self.exec_ymls}" --rm -v {self.run_share_dir}:{self.share_dir} {self.docker_image}'

        self.logger.debug(cmd)
        return self._execute(cmd, output_to_json=False, exit_error=True)

    def create(self):
        """
        Create and execute Docker container for Ansible playbook execution.
        """
        if not self.stateful_id:
            self.logger.error("STATEFUL_ID needs to be set for using of docker run environments")
            exit(9)

        if not os.path.exists(self.exec_dir):
            self.logger.warn(f"ansible directory must exists at {self.exec_dir} - something went wrong")
            os.chdir(self.run_dir)
            exit(9)

        results = self._exec_docker_local()
        if results.get("output"):
            self.logger.debug(results.get("output"))


def usage():
    """
    Display script usage information.
    """
    print("""
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    basic:
        DOCKER_IMAGE (default config0/ansible-run-env) - the docker container/image to run execution
        SHARE_DIR (default is /var/tmp/share) - the shared directory that is shared with the worker during docker container execution
        METHOD - create

    create:
        RESOURCE_TYPE

       """)
    exit(4)


if __name__ == '__main__':
    try:
        json_input = sys.argv[1]
    except:
        json_input = None

    main = Main()

    if json_input:
        main.set_inputargs(json_input=json_input)
    else:
        main.set_inputargs(add_app_vars=True)

    method = main.inputargs.get("method")
    if not method:
        method = "create"

    if method == "create":
        main.create()
    elif method == "ssh_key":
        main.write_ssh_key()
    elif method == "hosts":
        main.write_hosts_file()
    else:
        usage()
        print(f'method "{method}" not supported!')
        exit(4)