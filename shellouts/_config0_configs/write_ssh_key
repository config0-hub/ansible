#!/usr/bin/env python
# Copyright 2025 Gary Leong <gary@config0.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
import os
from config0_publisher.serialization import b64_decode
from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource.manage import ResourceCmdHelper


class Main(ResourceCmdHelper):
    """
    Main class for managing Ansible SSH key configurations.
    Inherits from ResourceCmdHelper to utilize resource management functionalities.
    """

    def __init__(self):
        """
        Initializes the Main class with necessary configurations.
        """
        super().__init__(app_name="ansible", set_must_exists=["stateful_id"])

        self.classname = 'ANSIBLE_PRIVATE_KEY'
        self.logger = Config0Logger(self.classname, logcategory="cloudprovider")
        self.logger.debug(f"Instantiating {self.classname}")
        self.set_inputargs(add_app_vars=True)

        # Remap application-specific variables in the input arguments.
        # e.g. ANS_VAR_mongodb_public_ips to mongodb_public_ips
        self.remap_app_vars()

    # dup 46362
    def _write_key_to_file(self, key, filepath, permission=0o400):
        """
        Write a base64-encoded value from inputargs to a file with specified permissions.

        Args:
            key: The key to look up in self.inputargs
            filepath: The path where the file should be written
            permission: File permissions to set (default: 0o400, read-only for owner)

        Returns:
            The filepath if successful, None otherwise
        """
        # Return early if the key doesn't exist or has no value
        if not self.inputargs.get(key):
            return None

        # Decode the base64 value
        decoded_content = b64_decode(self.inputargs[key])

        # Write the content directly to the file
        with open(filepath, "w") as output_file:
            output_file.write(decoded_content)

        # Set file permissions and copy to shared location
        os.chmod(filepath, permission)
        self.copy_file_to_share(filepath)

        return filepath

    def create(self):
        """
        Creates a private SSH key file from the specified input arguments.
        """
        filepath = f"{self.exec_dir}/ssh_key.pem"

        self._write_key_to_file(
            key="private_key",
            filepath=filepath,
            permission=0o400
        )

        self.logger.debug("#" * 32)
        self.logger.debug(f"SSH key file written to {filepath}")
        self.logger.debug("#" * 32)


def usage():
    """
    Prints usage instructions for the script.
    """
    print("""
script + environmental variables

or

script + json_input (as argument)

environmental variables:

    create:
        JOB_INSTANCE_ID
        SCHEDULE_ID
        RUN_ID
        METHOD
        ANS_VAR_private_key
    """)
    exit(4)


if __name__ == '__main__':
    try:
        json_input = sys.argv[1]
    except IndexError:
        json_input = None

    main = Main()

    if main.inputargs.get("method", "create") == "create":
        main.check_required_inputargs(keys=["private_key"])
        main.create()
    else:
        usage()
        print(f'Method "{main.inputargs.get("method", "create")}" not supported!')
        exit(4)